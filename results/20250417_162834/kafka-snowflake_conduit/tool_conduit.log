Compose now can delegate build to bake for better performances
Just set COMPOSE_BAKE=true
#0 building with "default" instance using docker driver

#1 [benchi-conduit internal] load build definition from Dockerfile
#1 transferring dockerfile: 444B done
#1 DONE 0.0s

#2 [benchi-conduit internal] load metadata for docker.io/library/alpine:3.21
#2 DONE 0.1s

#3 [benchi-conduit internal] load metadata for docker.io/library/golang:1.24-bullseye
#3 DONE 0.1s

#4 [benchi-conduit internal] load .dockerignore
#4 transferring context: 2B done
#4 DONE 0.0s

#5 [benchi-conduit base 1/4] FROM docker.io/library/golang:1.24-bullseye@sha256:f0fe88a509ede4f792cbd42056e939c210a1b2be282cfe89c57a654ef8707cd2
#5 DONE 0.0s

#6 [benchi-conduit final 1/3] FROM docker.io/library/alpine:3.21@sha256:a8560b36e8b8210634f77d9f7f9efd7ffa463e380b75e2e74aff4511df3ef88c
#6 DONE 0.0s

#7 [benchi-conduit internal] load build context
#7 transferring context: 612B done
#7 DONE 0.0s

#8 [benchi-conduit final 2/3] WORKDIR /app
#8 CACHED

#9 [benchi-conduit base 3/4] COPY . .
#9 CACHED

#10 [benchi-conduit base 2/4] WORKDIR /app
#10 CACHED

#11 [benchi-conduit base 4/4] RUN CGO_ENABLED=0 make build
#11 CACHED

#12 [benchi-conduit final 3/3] COPY --from=base /app/conduit /app
#12 CACHED

#13 [benchi-conduit] exporting to image
#13 exporting layers done
#13 writing image sha256:f81820e7a54bb2e3fa5b57f33b093958465504db891b92a352f4f819c4f64898 done
#13 naming to docker.io/benchi/conduit done
#13 DONE 0.0s

#14 [benchi-conduit] resolving provenance for metadata file
#14 DONE 0.0s
 benchi-conduit  Built
 Container benchi-conduit  Creating
 Container benchi-conduit  Created
Attaching to benchi-conduit
benchi-conduit  | {"level":"info","component":"badger.DB","time":1744907324089,"message":"All 0 tables opened in 0s"}
benchi-conduit  | {"level":"info","component":"badger.DB","time":1744907324091,"message":"Discard stats nextEmptySlot: 0"}
benchi-conduit  | {"level":"info","component":"badger.DB","time":1744907324091,"message":"Set nextTxnTs to 0"}
benchi-conduit  | {"level":"info","component":"plugin.processor.standalone.Registry","time":1744907324092,"message":"loading processor plugins from directory /app/processors ..."}
benchi-conduit  | {"level":"warn","component":"plugin.processor.standalone.Registry","error":"open /app/processors: no such file or directory","time":1744907324092,"message":"could not read processor plugin directory"}
benchi-conduit  | {"level":"info","component":"plugin.processor.standalone.Registry","plugin_path":"/app/processors","count":0,"time":1744907324092,"message":"standalone processor plugins initialized"}
benchi-conduit  | {"level":"info","component":"plugin.processor.builtin.Registry","count":22,"time":1744907324093,"message":"builtin processor plugins initialized"}
benchi-conduit  | {"level":"info","time":1744907324093,"message":"using lifecycle service v2"}
benchi-conduit  | {"level":"debug","component":"processor.Service","time":1744907324093,"message":"initializing processors"}
benchi-conduit  | {"level":"info","component":"processor.Service","count":0,"time":1744907324093,"message":"processors initialized"}
benchi-conduit  | {"level":"info","address":"[::]:34479","time":1744907324093,"message":"connector utilities started"}
benchi-conduit  | {"level":"info","time":1744907324093,"message":"connector utilities started on [::]:34479"}
benchi-conduit  | {"level":"info","component":"plugin.connector.builtin.Registry","count":10,"time":1744907324093,"message":"builtin connector plugins initialized"}
benchi-conduit  | {"level":"debug","component":"plugin.connector.standalone.Registry","time":1744907324093,"message":"loading connector plugins from directory /app/connectors"}
benchi-conduit  | {"level":"warn","component":"plugin.connector.standalone.Registry","error":"open /app/connectors: no such file or directory","time":1744907324093,"message":"could not read connector plugin directory"}
benchi-conduit  | {"level":"info","component":"plugin.connector.standalone.Registry","plugin_path":"/app/connectors","count":0,"time":1744907324093,"message":"standalone connector plugins initialized"}
benchi-conduit  | {"level":"debug","component":"connector.Service","time":1744907324093,"message":"initializing connectors"}
benchi-conduit  | {"level":"info","component":"connector.Service","count":0,"time":1744907324093,"message":"connectors initialized"}
benchi-conduit  | {"level":"debug","component":"pipeline.Service","time":1744907324093,"message":"initializing pipelines"}
benchi-conduit  | {"level":"info","component":"pipeline.Service","count":0,"time":1744907324093,"message":"pipelines initialized"}
benchi-conduit  | {"level":"debug","component":"provisioning.Service","pipelines_path":"/app/pipelines","time":1744907324093,"message":"initializing the provisioning service"}
benchi-conduit  | {"level":"debug","component":"provisioning.Service","action":"create pipeline with ID kafka-to-snowflake","time":1744907324094,"message":"executing action"}
benchi-conduit  | {"level":"debug","component":"provisioning.Service","action":"create connector with ID kafka-to-snowflake:kafka","time":1744907324095,"message":"executing action"}
benchi-conduit  | {"level":"debug","component":"provisioning.Service","action":"create connector with ID kafka-to-snowflake:snowflake","time":1744907324096,"message":"executing action"}
benchi-conduit  | {"level":"debug","component":"provisioning.Service","action":"create processor with ID kafka-to-snowflake:parsingpayload","time":1744907324096,"message":"executing action"}
benchi-conduit  | {"level":"debug","component":"processor.PluginService","stack":[{"func":"github.com/conduitio/conduit/pkg/plugin.init","file":"/go/pkg/mod/github.com/conduitio/conduit@v0.13.4/pkg/plugin/errors.go","line":22}],"error":"plugin not found","time":1744907324096,"message":"could not find standalone plugin dispenser, falling back to builtin plugin"}
benchi-conduit  | {"level":"debug","component":"provisioning.Service","action":"create processor with ID kafka-to-snowflake:fieldset","time":1744907324096,"message":"executing action"}
benchi-conduit  | {"level":"debug","component":"processor.PluginService","stack":[{"func":"github.com/conduitio/conduit/pkg/plugin.init","file":"/go/pkg/mod/github.com/conduitio/conduit@v0.13.4/pkg/plugin/errors.go","line":22}],"error":"plugin not found","time":1744907324096,"message":"could not find standalone plugin dispenser, falling back to builtin plugin"}
benchi-conduit  | {"level":"debug","component":"provisioning.Service","action":"create processor with ID kafka-to-snowflake:parsingkey","time":1744907324096,"message":"executing action"}
benchi-conduit  | {"level":"debug","component":"processor.PluginService","stack":[{"func":"github.com/conduitio/conduit/pkg/plugin.init","file":"/go/pkg/mod/github.com/conduitio/conduit@v0.13.4/pkg/plugin/errors.go","line":22}],"error":"plugin not found","time":1744907324096,"message":"could not find standalone plugin dispenser, falling back to builtin plugin"}
benchi-conduit  | {"level":"info","component":"provisioning.Service","created":["kafka-to-snowflake"],"deleted":[],"pipelines_path":"/app/pipelines","time":1744907324096,"message":"pipeline configs provisioned"}
benchi-conduit  | {"level":"debug","component":"lifecycle.Service","time":1744907324096,"message":"initializing pipelines statuses"}
benchi-conduit  | {"level":"info","address":"[::]:8084","time":1744907324096,"message":"grpc API started"}
benchi-conduit  | {"level":"info","address":"[::]:8080","time":1744907324096,"message":"http API started"}
benchi-conduit  | {"level":"info","time":1744907324096}
benchi-conduit  | {"level":"info","time":1744907324096,"message":"click here to navigate to explore the HTTP API: http://localhost:8080/openapi"}
benchi-conduit  | {"level":"info","time":1744907324096}
benchi-conduit  | {"level":"debug","component":"lifecycle.Service","pipeline_id":"kafka-to-snowflake","time":1744907324868,"request_id":"4eb5d05e-b7df-41e8-a635-9681ba4927bc","message":"starting pipeline"}
benchi-conduit  | {"level":"debug","component":"connector.PluginService","stack":[{"func":"github.com/conduitio/conduit/pkg/plugin.init","file":"/go/pkg/mod/github.com/conduitio/conduit@v0.13.4/pkg/plugin/errors.go","line":22}],"error":"plugin not found","time":1744907324868,"message":"could not find standalone plugin dispenser, falling back to builtin plugin"}
benchi-conduit  | {"level":"debug","component":"connector.PluginService","stack":[{"func":"github.com/conduitio/conduit/pkg/plugin.init","file":"/go/pkg/mod/github.com/conduitio/conduit@v0.13.4/pkg/plugin/errors.go","line":22}],"error":"plugin not found","time":1744907324868,"message":"could not find standalone plugin dispenser, falling back to builtin plugin"}
benchi-conduit  | {"level":"debug","component":"processor.PluginService","stack":[{"func":"github.com/conduitio/conduit/pkg/plugin.init","file":"/go/pkg/mod/github.com/conduitio/conduit@v0.13.4/pkg/plugin/errors.go","line":22}],"error":"plugin not found","time":1744907324868,"request_id":"4eb5d05e-b7df-41e8-a635-9681ba4927bc","message":"could not find standalone plugin dispenser, falling back to builtin plugin"}
benchi-conduit  | {"level":"debug","component":"processor.PluginService","stack":[{"func":"github.com/conduitio/conduit/pkg/plugin.init","file":"/go/pkg/mod/github.com/conduitio/conduit@v0.13.4/pkg/plugin/errors.go","line":22}],"error":"plugin not found","time":1744907324868,"request_id":"4eb5d05e-b7df-41e8-a635-9681ba4927bc","message":"could not find standalone plugin dispenser, falling back to builtin plugin"}
benchi-conduit  | {"level":"debug","component":"processor.PluginService","stack":[{"func":"github.com/conduitio/conduit/pkg/plugin.init","file":"/go/pkg/mod/github.com/conduitio/conduit@v0.13.4/pkg/plugin/errors.go","line":22}],"error":"plugin not found","time":1744907324868,"request_id":"4eb5d05e-b7df-41e8-a635-9681ba4927bc","message":"could not find standalone plugin dispenser, falling back to builtin plugin"}
benchi-conduit  | {"level":"info","pipeline_id":"kafka-to-snowflake","component":"lifecycle.Service","tasks":["kafka-to-snowflake:kafka(*funnel.SourceTask)","kafka-to-snowflake:parsingpayload(*funnel.ProcessorTask)","kafka-to-snowflake:fieldset(*funnel.ProcessorTask)","kafka-to-snowflake:parsingkey(*funnel.ProcessorTask)","kafka-to-snowflake:snowflake(*funnel.DestinationTask)"],"order":[[1],[2],[3],[4],null],"time":1744907324868,"request_id":"4eb5d05e-b7df-41e8-a635-9681ba4927bc","message":"pipeline tasks and order"}
benchi-conduit  | {"level":"debug","pipeline_id":"kafka-to-snowflake","connector_id":"kafka-to-snowflake:kafka","component":"task:source","time":1744907324868,"message":"opening source"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:kafka","component":"connector.Source","time":1744907324868,"message":"dispensing source connector plugin"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:kafka","plugin_type":"source","plugin_name":"kafka","component":"builtin.sourcePluginAdapter","request":{"Config":{"readFromBeginning":"true","sdk.batch.delay":"1s","sdk.batch.size":"100000","sdk.schema.context.enabled":"true","sdk.schema.context.name":"","sdk.schema.extract.key.enabled":"false","sdk.schema.extract.key.subject":"key","sdk.schema.extract.payload.enabled":"false","sdk.schema.extract.payload.subject":"payload","sdk.schema.extract.type":"avro","servers":"benchi-kafka:9092","topics":"snowflake.test.users"}},"time":1744907324868,"message":"calling Configure"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:kafka","plugin_type":"source","plugin_name":"kafka","component":"plugin","time":1744907324868,"message":"sanitizing configuration and applying defaults"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:kafka","plugin_type":"source","plugin_name":"kafka","component":"plugin","time":1744907324868,"message":"validating configuration according to the specifications"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:kafka","plugin_type":"source","plugin_name":"kafka","component":"plugin","target":"*source.Config","time":1744907324868,"message":"decoding configuration into the target object"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:kafka","plugin_type":"source","plugin_name":"kafka","component":"builtin.sourcePluginAdapter","request":{"Config":{"readFromBeginning":"true","sdk.batch.delay":"1s","sdk.batch.size":"100000","sdk.schema.context.enabled":"true","sdk.schema.context.name":"","sdk.schema.extract.key.enabled":"false","sdk.schema.extract.key.subject":"key","sdk.schema.extract.payload.enabled":"false","sdk.schema.extract.payload.subject":"payload","sdk.schema.extract.type":"avro","servers":"benchi-kafka:9092","topics":"snowflake.test.users"}},"time":1744907324869,"message":"calling LifecycleOnCreated"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:kafka","plugin_type":"source","plugin_name":"kafka","component":"builtin.sourcePluginAdapter","request":{"Position":null},"time":1744907324869,"message":"calling Start"}
benchi-conduit  | {"level":"info","connector_id":"kafka-to-snowflake:kafka","plugin_type":"source","plugin_name":"kafka","component":"plugin","groupId":"6fedea40-8edc-49e9-b461-2487025e8fc8","time":1744907324874,"message":"assigning source to new consumer group"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:kafka","plugin_type":"source","plugin_name":"kafka","component":"builtin.sourcePluginAdapter","time":1744907324881,"message":"calling Run"}
benchi-conduit  | {"level":"info","connector_id":"kafka-to-snowflake:kafka","component":"connector.Source","time":1744907324881,"message":"source connector plugin successfully started"}
benchi-conduit  | {"level":"debug","pipeline_id":"kafka-to-snowflake","connector_id":"kafka-to-snowflake:kafka","component":"task:source","time":1744907324881,"message":"source open"}
benchi-conduit  | {"level":"debug","pipeline_id":"kafka-to-snowflake","processor_id":"kafka-to-snowflake:parsingpayload","component":"task:processor","time":1744907324881,"message":"opening processor"}
benchi-conduit  | {"level":"debug","component":"processor","time":1744907324881,"processor_id":"kafka-to-snowflake:parsingpayload","message":"sanitizing configuration and applying defaults"}
benchi-conduit  | {"level":"debug","component":"processor","time":1744907324881,"processor_id":"kafka-to-snowflake:parsingpayload","message":"validating configuration according to the specifications"}
benchi-conduit  | {"level":"debug","component":"processor","target":"*json.decodeConfig","time":1744907324881,"processor_id":"kafka-to-snowflake:parsingpayload","message":"decoding configuration into the target object"}
benchi-conduit  | {"level":"debug","pipeline_id":"kafka-to-snowflake","processor_id":"kafka-to-snowflake:parsingpayload","component":"task:processor","time":1744907324881,"message":"processor open"}
benchi-conduit  | {"level":"debug","pipeline_id":"kafka-to-snowflake","processor_id":"kafka-to-snowflake:fieldset","component":"task:processor","time":1744907324881,"message":"opening processor"}
benchi-conduit  | {"level":"debug","component":"processor","time":1744907324881,"processor_id":"kafka-to-snowflake:fieldset","message":"sanitizing configuration and applying defaults"}
benchi-conduit  | {"level":"debug","component":"processor","time":1744907324881,"processor_id":"kafka-to-snowflake:fieldset","message":"validating configuration according to the specifications"}
benchi-conduit  | {"level":"debug","component":"processor","target":"*field.setConfig","time":1744907324881,"processor_id":"kafka-to-snowflake:fieldset","message":"decoding configuration into the target object"}
benchi-conduit  | {"level":"info","connector_id":"kafka-to-snowflake:kafka","plugin_type":"source","plugin_name":"kafka","component":"plugin","time":1744907324881,"message":"source does not support batch reads, falling back to single reads"}
benchi-conduit  | {"level":"debug","pipeline_id":"kafka-to-snowflake","processor_id":"kafka-to-snowflake:fieldset","component":"task:processor","time":1744907324881,"message":"processor open"}
benchi-conduit  | {"level":"debug","pipeline_id":"kafka-to-snowflake","processor_id":"kafka-to-snowflake:parsingkey","component":"task:processor","time":1744907324881,"message":"opening processor"}
benchi-conduit  | {"level":"debug","component":"processor","time":1744907324881,"processor_id":"kafka-to-snowflake:parsingkey","message":"sanitizing configuration and applying defaults"}
benchi-conduit  | {"level":"debug","component":"processor","time":1744907324881,"processor_id":"kafka-to-snowflake:parsingkey","message":"validating configuration according to the specifications"}
benchi-conduit  | {"level":"debug","component":"processor","target":"*json.decodeConfig","time":1744907324881,"processor_id":"kafka-to-snowflake:parsingkey","message":"decoding configuration into the target object"}
benchi-conduit  | {"level":"debug","pipeline_id":"kafka-to-snowflake","processor_id":"kafka-to-snowflake:parsingkey","component":"task:processor","time":1744907324881,"message":"processor open"}
benchi-conduit  | {"level":"debug","pipeline_id":"kafka-to-snowflake","connector_id":"kafka-to-snowflake:snowflake","component":"task:destination","time":1744907324881,"message":"opening destination"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","component":"connector.Destination","time":1744907324881,"message":"dispensing destination connector plugin"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"builtin.destinationPluginAdapter","request":{"Config":{"snowflake.compression":"zstd","snowflake.database":"BENCHI","snowflake.format":"csv","snowflake.host":"********.snowflakecomputing.com","snowflake.namingPrefix":"meroxa","snowflake.password":"********","snowflake.port":"0","snowflake.primaryKey":"id","snowflake.schema":"public","snowflake.stage":"stage","snowflake.table":"conduit_test","snowflake.username":"meroxa_user","snowflake.warehouse":"COMPUTE_WH"}},"time":1744907324881,"message":"calling Configure"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907324881,"message":"sanitizing configuration and applying defaults"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907324881,"message":"validating configuration according to the specifications"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","target":"*destination.Config","time":1744907324881,"message":"decoding configuration into the target object"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"builtin.destinationPluginAdapter","request":{"Config":{"snowflake.compression":"zstd","snowflake.database":"BENCHI","snowflake.format":"csv","snowflake.host":"********.snowflakecomputing.com","snowflake.namingPrefix":"meroxa","snowflake.password":"********","snowflake.port":"0","snowflake.primaryKey":"id","snowflake.schema":"public","snowflake.stage":"stage","snowflake.table":"conduit_test","snowflake.username":"meroxa_user","snowflake.warehouse":"COMPUTE_WH"}},"time":1744907324882,"message":"calling LifecycleOnCreated"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"builtin.destinationPluginAdapter","request":{},"time":1744907324882,"message":"calling Open"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"builtin.destinationPluginAdapter","time":1744907325576,"message":"calling Run"}
benchi-conduit  | {"level":"info","connector_id":"kafka-to-snowflake:snowflake","component":"connector.Destination","time":1744907325576,"message":"destination connector plugin successfully started"}
benchi-conduit  | {"level":"debug","pipeline_id":"kafka-to-snowflake","connector_id":"kafka-to-snowflake:snowflake","component":"task:destination","time":1744907325576,"message":"destination open"}
benchi-conduit  | {"level":"debug","pipeline_id":"kafka-to-snowflake","connector_id":"dlq","component":"task:destination","time":1744907325576,"message":"opening destination"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake-dlq","component":"connector.Destination","time":1744907325576,"message":"dispensing destination connector plugin"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake-dlq","plugin_type":"destination","plugin_name":"builtin:log","component":"builtin.destinationPluginAdapter","request":{"Config":{"level":"warn","message":"record delivery failed"}},"time":1744907325576,"message":"calling Configure"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake-dlq","plugin_type":"destination","plugin_name":"builtin:log","component":"plugin","time":1744907325576,"message":"sanitizing configuration and applying defaults"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake-dlq","plugin_type":"destination","plugin_name":"builtin:log","component":"plugin","time":1744907325576,"message":"validating configuration according to the specifications"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake-dlq","plugin_type":"destination","plugin_name":"builtin:log","component":"plugin","target":"*log.DestinationConfig","time":1744907325576,"message":"decoding configuration into the target object"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake-dlq","plugin_type":"destination","plugin_name":"builtin:log","component":"builtin.destinationPluginAdapter","request":{},"time":1744907325576,"message":"calling Open"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake-dlq","plugin_type":"destination","plugin_name":"builtin:log","component":"builtin.destinationPluginAdapter","time":1744907325576,"message":"calling Run"}
benchi-conduit  | {"level":"info","connector_id":"kafka-to-snowflake-dlq","component":"connector.Destination","time":1744907325576,"message":"destination connector plugin successfully started"}
benchi-conduit  | {"level":"debug","pipeline_id":"kafka-to-snowflake","connector_id":"dlq","component":"task:destination","time":1744907325576,"message":"destination open"}
benchi-conduit  | {"level":"info","component":"lifecycle.Service","pipeline_id":"kafka-to-snowflake","time":1744907325577,"request_id":"4eb5d05e-b7df-41e8-a635-9681ba4927bc","message":"pipeline started"}
benchi-conduit  | {"level":"info","http_endpoint":"POST /v1/pipelines/kafka-to-snowflake/start","grpc_method":"/api.v1.PipelineService/StartPipeline","duration":708.56959,"grpc_status_code":"OK","time":1744907325577,"request_id":"4eb5d05e-b7df-41e8-a635-9681ba4927bc","message":"request processed"}
benchi-conduit  | {"level":"debug","component":"connector.Persister","stack":null,"count":2,"duration":0.172564,"time":1744907325869,"message":"persisted connectors"}
benchi-conduit  | {"level":"warn","connector_id":"kafka-to-snowflake:kafka","plugin_type":"source","plugin_name":"kafka","component":"plugin","time":1744907328718,"message":"record keys produced by this connector are not structured and won't be encoded\""}
benchi-conduit  | {"level":"warn","connector_id":"kafka-to-snowflake:kafka","plugin_type":"source","plugin_name":"kafka","component":"plugin","time":1744907328718,"message":"record payloads produced by this connector are not structured and won't be encoded\""}
benchi-conduit  | {"level":"warn","component":"processor","time":1744907329145,"processor_id":"kafka-to-snowflake:parsingpayload","message":"record does not have an attached schema for the key, consider disabling the processor schema key decoding using \"sdk.schema.decode.key.enabled: false\""}
benchi-conduit  | {"level":"warn","component":"processor","time":1744907329292,"processor_id":"kafka-to-snowflake:parsingpayload","message":"record does not have an attached schema for the payload, consider disabling the processor schema payload decoding using \"sdk.schema.decode.payload.enabled: false\""}
benchi-conduit  | {"level":"warn","component":"processor","time":1744907329845,"processor_id":"kafka-to-snowflake:parsingpayload","message":"record key is not structured, consider disabling the processor schema key encoding using \"sdk.schema.encode.key.enabled: false\""}
benchi-conduit  | {"level":"warn","component":"processor","time":1744907329845,"processor_id":"kafka-to-snowflake:parsingpayload","message":"outgoing record does not have an attached schema for the payload, consider disabling the processor schema payload encoding using \"sdk.schema.encode.payload.enabled: false\""}
benchi-conduit  | {"level":"warn","component":"processor","time":1744907330021,"processor_id":"kafka-to-snowflake:fieldset","message":"record does not have an attached schema for the key, consider disabling the processor schema key decoding using \"sdk.schema.decode.key.enabled: false\""}
benchi-conduit  | {"level":"warn","component":"processor","time":1744907330156,"processor_id":"kafka-to-snowflake:fieldset","message":"record does not have an attached schema for the payload, consider disabling the processor schema payload decoding using \"sdk.schema.decode.payload.enabled: false\""}
benchi-conduit  | {"level":"warn","component":"processor","time":1744907330763,"processor_id":"kafka-to-snowflake:fieldset","message":"record key is not structured, consider disabling the processor schema key encoding using \"sdk.schema.encode.key.enabled: false\""}
benchi-conduit  | {"level":"warn","component":"processor","time":1744907330763,"processor_id":"kafka-to-snowflake:fieldset","message":"outgoing record does not have an attached schema for the payload, consider disabling the processor schema payload encoding using \"sdk.schema.encode.payload.enabled: false\""}
benchi-conduit  | {"level":"warn","component":"processor","time":1744907330913,"processor_id":"kafka-to-snowflake:parsingkey","message":"record does not have an attached schema for the key, consider disabling the processor schema key decoding using \"sdk.schema.decode.key.enabled: false\""}
benchi-conduit  | {"level":"warn","component":"processor","time":1744907331028,"processor_id":"kafka-to-snowflake:parsingkey","message":"record does not have an attached schema for the payload, consider disabling the processor schema payload decoding using \"sdk.schema.decode.payload.enabled: false\""}
benchi-conduit  | {"level":"warn","component":"processor","time":1744907331443,"processor_id":"kafka-to-snowflake:parsingkey","message":"outgoing record does not have an attached schema for the key, consider disabling the processor schema key encoding using \"sdk.schema.encode.key.enabled: false\""}
benchi-conduit  | {"level":"warn","component":"processor","time":1744907331443,"processor_id":"kafka-to-snowflake:parsingkey","message":"outgoing record does not have an attached schema for the payload, consider disabling the processor schema payload encoding using \"sdk.schema.encode.payload.enabled: false\""}
benchi-conduit  | {"level":"warn","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907331920,"message":"record does not have an attached schema for the key, consider disabling the destination schema key decoding using \"sdk.schema.extract.key.enabled: false\""}
benchi-conduit  | {"level":"warn","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907331920,"message":"record does not have an attached schema for the payload, consider disabling the destination schema payload decoding using \"sdk.schema.extract.payload.enabled: false\""}
benchi-conduit  | {"level":"info","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907332196,"message":"batch contains 100000 records"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907332197,"message":"schema detected: map[full_time:BOOLEAN id:FLOAT meroxa_created_at:TIMESTAMP_TZ meroxa_deleted_at:TIMESTAMP_TZ meroxa_operation:VARCHAR meroxa_updated_at:TIMESTAMP_TZ name:VARCHAR updated_at:VARCHAR]"}
benchi-conduit  | {"level":"info","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907332363,"message":"table conduit_test does not exist yet"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907332363,"message":"num of records in batch before deduping: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907332421,"message":"num of records in batch after deduping: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907332648,"message":"num inserts in CSV buffer: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907332648,"message":"num updates/deletes in CSV buffer: 0"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907332836,"message":"executing: CREATE TABLE IF NOT EXISTS conduit_test (\n\t\tmeroxa_operation VARCHAR, meroxa_created_at TIMESTAMP_TZ, meroxa_updated_at TIMESTAMP_TZ, meroxa_deleted_at TIMESTAMP_TZ, full_time BOOLEAN, id FLOAT, name VARCHAR, updated_at VARCHAR,\n\t\tPRIMARY KEY (id)\n\t)"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","insertbuf_len":6988895,"updatebuf_len":0,"time":1744907333557,"message":"preparing to upload data to stage"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","duration":66.832558,"in":6988895,"out":917871,"time":1744907333624,"message":"finished compressing"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","duration":557.65512,"time":1744907334115,"message":"finished uploading file aa421c1d8cd642a79ca295e9f7dd6e13_inserts.csv.zstd"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907334319,"message":"start of merge"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907334319,"message":"insertsFilename=aa421c1d8cd642a79ca295e9f7dd6e13_inserts.csv.zstd, updatesFilename="}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907334319,"message":"constructing merge query for inserts"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907334319,"message":"executing: MERGE INTO conduit_test as a USING ( select $1 meroxa_operation, $2 meroxa_created_at, $3 meroxa_updated_at, $4 meroxa_deleted_at, $5 full_time, $6 id, $7 name, $8 updated_at from @stage/aa421c1d8cd642a79ca295e9f7dd6e13_inserts.csv.zstd (FILE_FORMAT =>  CSV_CONDUIT_SNOWFLAKE ) ) AS b ON a.id = b.id\n\t\t\tWHEN MATCHED AND ( b.meroxa_operation = 'create' OR b.meroxa_operation = 'snapshot' ) THEN UPDATE SET a.meroxa_operation = b.meroxa_operation, a.meroxa_created_at = b.meroxa_created_at, a.meroxa_updated_at = b.meroxa_updated_at, a.meroxa_deleted_at = b.meroxa_deleted_at, a.full_time = b.full_time, a.id = b.id, a.name = b.name, a.updated_at = b.updated_at\n\t\t\tWHEN NOT MATCHED AND ( b.meroxa_operation = 'create' OR b.meroxa_operation = 'snapshot' ) THEN INSERT  (a.meroxa_operation, a.meroxa_created_at, a.meroxa_updated_at, a.meroxa_deleted_at, a.full_time, a.id, a.name, a.updated_at) VALUES (b.meroxa_operation, b.meroxa_created_at, b.meroxa_updated_at, b.meroxa_deleted_at, b.full_time, b.id, b.name, b.updated_at) ; "}
benchi-conduit  | {"level":"info","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907335231,"message":"ran MERGE for inserts. rows affected: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","file":"aa421c1d8cd642a79ca295e9f7dd6e13_inserts.csv.zstd","time":1744907335906,"message":"cleaning file from stage \"stage\""}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","duration":3891.219076,"time":1744907336087,"message":"finished processing records"}
benchi-conduit  | {"level":"debug","component":"connector.Persister","stack":null,"count":1,"duration":0.177078,"time":1744907337243,"message":"persisted connectors"}
benchi-conduit  | {"level":"info","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907339080,"message":"batch contains 100000 records"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907339080,"message":"schema detected: map[full_time:BOOLEAN id:FLOAT meroxa_created_at:TIMESTAMP_TZ meroxa_deleted_at:TIMESTAMP_TZ meroxa_operation:VARCHAR meroxa_updated_at:TIMESTAMP_TZ name:VARCHAR updated_at:VARCHAR]"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907339184,"message":"executing: SHOW COLUMNS IN TABLE conduit_test;"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907339755,"message":"Existing Table Schema (map[full_time:BOOLEAN id:FLOAT meroxa_created_at:TIMESTAMP_TZ meroxa_deleted_at:TIMESTAMP_TZ meroxa_operation:VARCHAR meroxa_updated_at:TIMESTAMP_TZ name:VARCHAR updated_at:VARCHAR])"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907339755,"message":"Connector Generated Schema (map[full_time:BOOLEAN id:FLOAT meroxa_created_at:TIMESTAMP_TZ meroxa_deleted_at:TIMESTAMP_TZ meroxa_operation:VARCHAR meroxa_updated_at:TIMESTAMP_TZ name:VARCHAR updated_at:VARCHAR])"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907339755,"message":"num of records in batch before deduping: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907339814,"message":"num of records in batch after deduping: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907340052,"message":"num inserts in CSV buffer: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907340052,"message":"num updates/deletes in CSV buffer: 0"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907340475,"message":"executing: CREATE TABLE IF NOT EXISTS conduit_test (\n\t\tmeroxa_operation VARCHAR, meroxa_created_at TIMESTAMP_TZ, meroxa_updated_at TIMESTAMP_TZ, meroxa_deleted_at TIMESTAMP_TZ, full_time BOOLEAN, id FLOAT, name VARCHAR, updated_at VARCHAR,\n\t\tPRIMARY KEY (id)\n\t)"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","insertbuf_len":7100000,"updatebuf_len":0,"time":1744907340773,"message":"preparing to upload data to stage"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","duration":67.567252,"in":7100000,"out":927764,"time":1744907340840,"message":"finished compressing"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","duration":393.251837,"time":1744907341166,"message":"finished uploading file 3068368f3d1947adb132b6a43340341f_inserts.csv.zstd"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907341273,"message":"start of merge"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907341273,"message":"insertsFilename=3068368f3d1947adb132b6a43340341f_inserts.csv.zstd, updatesFilename="}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907341273,"message":"constructing merge query for inserts"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907341273,"message":"executing: MERGE INTO conduit_test as a USING ( select $1 meroxa_operation, $2 meroxa_created_at, $3 meroxa_updated_at, $4 meroxa_deleted_at, $5 full_time, $6 id, $7 name, $8 updated_at from @stage/3068368f3d1947adb132b6a43340341f_inserts.csv.zstd (FILE_FORMAT =>  CSV_CONDUIT_SNOWFLAKE ) ) AS b ON a.id = b.id\n\t\t\tWHEN MATCHED AND ( b.meroxa_operation = 'create' OR b.meroxa_operation = 'snapshot' ) THEN UPDATE SET a.meroxa_operation = b.meroxa_operation, a.meroxa_created_at = b.meroxa_created_at, a.meroxa_updated_at = b.meroxa_updated_at, a.meroxa_deleted_at = b.meroxa_deleted_at, a.full_time = b.full_time, a.id = b.id, a.name = b.name, a.updated_at = b.updated_at\n\t\t\tWHEN NOT MATCHED AND ( b.meroxa_operation = 'create' OR b.meroxa_operation = 'snapshot' ) THEN INSERT  (a.meroxa_operation, a.meroxa_created_at, a.meroxa_updated_at, a.meroxa_deleted_at, a.full_time, a.id, a.name, a.updated_at) VALUES (b.meroxa_operation, b.meroxa_created_at, b.meroxa_updated_at, b.meroxa_deleted_at, b.full_time, b.id, b.name, b.updated_at) ; "}
benchi-conduit  | {"level":"info","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907342742,"message":"ran MERGE for inserts. rows affected: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","file":"3068368f3d1947adb132b6a43340341f_inserts.csv.zstd","time":1744907343111,"message":"cleaning file from stage \"stage\""}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","duration":4158.971136,"time":1744907343239,"message":"finished processing records"}
benchi-conduit  | {"level":"debug","component":"connector.Persister","stack":null,"count":1,"duration":0.148706,"time":1744907344392,"message":"persisted connectors"}
benchi-conduit  | {"level":"info","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907346154,"message":"batch contains 100000 records"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907346154,"message":"schema detected: map[full_time:BOOLEAN id:FLOAT meroxa_created_at:TIMESTAMP_TZ meroxa_deleted_at:TIMESTAMP_TZ meroxa_operation:VARCHAR meroxa_updated_at:TIMESTAMP_TZ name:VARCHAR updated_at:VARCHAR]"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907346235,"message":"executing: SHOW COLUMNS IN TABLE conduit_test;"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907346667,"message":"Existing Table Schema (map[full_time:BOOLEAN id:FLOAT meroxa_created_at:TIMESTAMP_TZ meroxa_deleted_at:TIMESTAMP_TZ meroxa_operation:VARCHAR meroxa_updated_at:TIMESTAMP_TZ name:VARCHAR updated_at:VARCHAR])"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907346667,"message":"Connector Generated Schema (map[full_time:BOOLEAN id:FLOAT meroxa_created_at:TIMESTAMP_TZ meroxa_deleted_at:TIMESTAMP_TZ meroxa_operation:VARCHAR meroxa_updated_at:TIMESTAMP_TZ name:VARCHAR updated_at:VARCHAR])"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907346667,"message":"num of records in batch before deduping: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907346721,"message":"num of records in batch after deduping: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907346937,"message":"num inserts in CSV buffer: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907346937,"message":"num updates/deletes in CSV buffer: 0"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907347122,"message":"executing: CREATE TABLE IF NOT EXISTS conduit_test (\n\t\tmeroxa_operation VARCHAR, meroxa_created_at TIMESTAMP_TZ, meroxa_updated_at TIMESTAMP_TZ, meroxa_deleted_at TIMESTAMP_TZ, full_time BOOLEAN, id FLOAT, name VARCHAR, updated_at VARCHAR,\n\t\tPRIMARY KEY (id)\n\t)"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","insertbuf_len":7100000,"updatebuf_len":0,"time":1744907347359,"message":"preparing to upload data to stage"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","duration":56.1971,"in":7100000,"out":924890,"time":1744907347415,"message":"finished compressing"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","duration":424.424587,"time":1744907347783,"message":"finished uploading file 8e76be9ebe0545899d8a0915b2b42423_inserts.csv.zstd"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907347915,"message":"start of merge"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907347915,"message":"insertsFilename=8e76be9ebe0545899d8a0915b2b42423_inserts.csv.zstd, updatesFilename="}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907347915,"message":"constructing merge query for inserts"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907347915,"message":"executing: MERGE INTO conduit_test as a USING ( select $1 meroxa_operation, $2 meroxa_created_at, $3 meroxa_updated_at, $4 meroxa_deleted_at, $5 full_time, $6 id, $7 name, $8 updated_at from @stage/8e76be9ebe0545899d8a0915b2b42423_inserts.csv.zstd (FILE_FORMAT =>  CSV_CONDUIT_SNOWFLAKE ) ) AS b ON a.id = b.id\n\t\t\tWHEN MATCHED AND ( b.meroxa_operation = 'create' OR b.meroxa_operation = 'snapshot' ) THEN UPDATE SET a.meroxa_operation = b.meroxa_operation, a.meroxa_created_at = b.meroxa_created_at, a.meroxa_updated_at = b.meroxa_updated_at, a.meroxa_deleted_at = b.meroxa_deleted_at, a.full_time = b.full_time, a.id = b.id, a.name = b.name, a.updated_at = b.updated_at\n\t\t\tWHEN NOT MATCHED AND ( b.meroxa_operation = 'create' OR b.meroxa_operation = 'snapshot' ) THEN INSERT  (a.meroxa_operation, a.meroxa_created_at, a.meroxa_updated_at, a.meroxa_deleted_at, a.full_time, a.id, a.name, a.updated_at) VALUES (b.meroxa_operation, b.meroxa_created_at, b.meroxa_updated_at, b.meroxa_deleted_at, b.full_time, b.id, b.name, b.updated_at) ; "}
benchi-conduit  | {"level":"info","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907350646,"message":"ran MERGE for inserts. rows affected: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","file":"8e76be9ebe0545899d8a0915b2b42423_inserts.csv.zstd","time":1744907351078,"message":"cleaning file from stage \"stage\""}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","duration":5128.741789,"time":1744907351283,"message":"finished processing records"}
benchi-conduit  | {"level":"debug","component":"connector.Persister","stack":null,"count":1,"duration":0.137343,"time":1744907352427,"message":"persisted connectors"}
benchi-conduit  | {"level":"info","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907354225,"message":"batch contains 100000 records"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907354225,"message":"schema detected: map[full_time:BOOLEAN id:FLOAT meroxa_created_at:TIMESTAMP_TZ meroxa_deleted_at:TIMESTAMP_TZ meroxa_operation:VARCHAR meroxa_updated_at:TIMESTAMP_TZ name:VARCHAR updated_at:VARCHAR]"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907354316,"message":"executing: SHOW COLUMNS IN TABLE conduit_test;"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907354641,"message":"Existing Table Schema (map[full_time:BOOLEAN id:FLOAT meroxa_created_at:TIMESTAMP_TZ meroxa_deleted_at:TIMESTAMP_TZ meroxa_operation:VARCHAR meroxa_updated_at:TIMESTAMP_TZ name:VARCHAR updated_at:VARCHAR])"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907354641,"message":"Connector Generated Schema (map[full_time:BOOLEAN id:FLOAT meroxa_created_at:TIMESTAMP_TZ meroxa_deleted_at:TIMESTAMP_TZ meroxa_operation:VARCHAR meroxa_updated_at:TIMESTAMP_TZ name:VARCHAR updated_at:VARCHAR])"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907354642,"message":"num of records in batch before deduping: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907354699,"message":"num of records in batch after deduping: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907354910,"message":"num inserts in CSV buffer: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907354910,"message":"num updates/deletes in CSV buffer: 0"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907355082,"message":"executing: CREATE TABLE IF NOT EXISTS conduit_test (\n\t\tmeroxa_operation VARCHAR, meroxa_created_at TIMESTAMP_TZ, meroxa_updated_at TIMESTAMP_TZ, meroxa_deleted_at TIMESTAMP_TZ, full_time BOOLEAN, id FLOAT, name VARCHAR, updated_at VARCHAR,\n\t\tPRIMARY KEY (id)\n\t)"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","insertbuf_len":7100000,"updatebuf_len":0,"time":1744907355536,"message":"preparing to upload data to stage"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","duration":63.878679,"in":7100000,"out":923427,"time":1744907355600,"message":"finished compressing"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","duration":491.811652,"time":1744907356028,"message":"finished uploading file dadce8ff84984f6ea4b49fb5cf4f84a1_inserts.csv.zstd"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907356134,"message":"start of merge"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907356134,"message":"insertsFilename=dadce8ff84984f6ea4b49fb5cf4f84a1_inserts.csv.zstd, updatesFilename="}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907356134,"message":"constructing merge query for inserts"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907356134,"message":"executing: MERGE INTO conduit_test as a USING ( select $1 meroxa_operation, $2 meroxa_created_at, $3 meroxa_updated_at, $4 meroxa_deleted_at, $5 full_time, $6 id, $7 name, $8 updated_at from @stage/dadce8ff84984f6ea4b49fb5cf4f84a1_inserts.csv.zstd (FILE_FORMAT =>  CSV_CONDUIT_SNOWFLAKE ) ) AS b ON a.id = b.id\n\t\t\tWHEN MATCHED AND ( b.meroxa_operation = 'create' OR b.meroxa_operation = 'snapshot' ) THEN UPDATE SET a.meroxa_operation = b.meroxa_operation, a.meroxa_created_at = b.meroxa_created_at, a.meroxa_updated_at = b.meroxa_updated_at, a.meroxa_deleted_at = b.meroxa_deleted_at, a.full_time = b.full_time, a.id = b.id, a.name = b.name, a.updated_at = b.updated_at\n\t\t\tWHEN NOT MATCHED AND ( b.meroxa_operation = 'create' OR b.meroxa_operation = 'snapshot' ) THEN INSERT  (a.meroxa_operation, a.meroxa_created_at, a.meroxa_updated_at, a.meroxa_deleted_at, a.full_time, a.id, a.name, a.updated_at) VALUES (b.meroxa_operation, b.meroxa_created_at, b.meroxa_updated_at, b.meroxa_deleted_at, b.full_time, b.id, b.name, b.updated_at) ; "}
benchi-conduit  | {"level":"info","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907357513,"message":"ran MERGE for inserts. rows affected: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","file":"dadce8ff84984f6ea4b49fb5cf4f84a1_inserts.csv.zstd","time":1744907358121,"message":"cleaning file from stage \"stage\""}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","duration":4019.297459,"time":1744907358244,"message":"finished processing records"}
benchi-conduit  | {"level":"debug","component":"connector.Persister","stack":null,"count":1,"duration":0.131412,"time":1744907359389,"message":"persisted connectors"}
benchi-conduit  | {"level":"info","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907361234,"message":"batch contains 100000 records"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907361234,"message":"schema detected: map[full_time:BOOLEAN id:FLOAT meroxa_created_at:TIMESTAMP_TZ meroxa_deleted_at:TIMESTAMP_TZ meroxa_operation:VARCHAR meroxa_updated_at:TIMESTAMP_TZ name:VARCHAR updated_at:VARCHAR]"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907361321,"message":"executing: SHOW COLUMNS IN TABLE conduit_test;"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907361903,"message":"Existing Table Schema (map[full_time:BOOLEAN id:FLOAT meroxa_created_at:TIMESTAMP_TZ meroxa_deleted_at:TIMESTAMP_TZ meroxa_operation:VARCHAR meroxa_updated_at:TIMESTAMP_TZ name:VARCHAR updated_at:VARCHAR])"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907361903,"message":"Connector Generated Schema (map[full_time:BOOLEAN id:FLOAT meroxa_created_at:TIMESTAMP_TZ meroxa_deleted_at:TIMESTAMP_TZ meroxa_operation:VARCHAR meroxa_updated_at:TIMESTAMP_TZ name:VARCHAR updated_at:VARCHAR])"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907361903,"message":"num of records in batch before deduping: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907361959,"message":"num of records in batch after deduping: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907362170,"message":"num inserts in CSV buffer: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907362170,"message":"num updates/deletes in CSV buffer: 0"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907362319,"message":"executing: CREATE TABLE IF NOT EXISTS conduit_test (\n\t\tmeroxa_operation VARCHAR, meroxa_created_at TIMESTAMP_TZ, meroxa_updated_at TIMESTAMP_TZ, meroxa_deleted_at TIMESTAMP_TZ, full_time BOOLEAN, id FLOAT, name VARCHAR, updated_at VARCHAR,\n\t\tPRIMARY KEY (id)\n\t)"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","insertbuf_len":7100000,"updatebuf_len":0,"time":1744907362615,"message":"preparing to upload data to stage"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","duration":57.916361,"in":7100000,"out":923229,"time":1744907362673,"message":"finished compressing"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","duration":477.238703,"time":1744907363093,"message":"finished uploading file 615683d750a64bc4bb6ab179b45f896b_inserts.csv.zstd"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907363193,"message":"start of merge"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907363193,"message":"insertsFilename=615683d750a64bc4bb6ab179b45f896b_inserts.csv.zstd, updatesFilename="}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907363193,"message":"constructing merge query for inserts"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907363193,"message":"executing: MERGE INTO conduit_test as a USING ( select $1 meroxa_operation, $2 meroxa_created_at, $3 meroxa_updated_at, $4 meroxa_deleted_at, $5 full_time, $6 id, $7 name, $8 updated_at from @stage/615683d750a64bc4bb6ab179b45f896b_inserts.csv.zstd (FILE_FORMAT =>  CSV_CONDUIT_SNOWFLAKE ) ) AS b ON a.id = b.id\n\t\t\tWHEN MATCHED AND ( b.meroxa_operation = 'create' OR b.meroxa_operation = 'snapshot' ) THEN UPDATE SET a.meroxa_operation = b.meroxa_operation, a.meroxa_created_at = b.meroxa_created_at, a.meroxa_updated_at = b.meroxa_updated_at, a.meroxa_deleted_at = b.meroxa_deleted_at, a.full_time = b.full_time, a.id = b.id, a.name = b.name, a.updated_at = b.updated_at\n\t\t\tWHEN NOT MATCHED AND ( b.meroxa_operation = 'create' OR b.meroxa_operation = 'snapshot' ) THEN INSERT  (a.meroxa_operation, a.meroxa_created_at, a.meroxa_updated_at, a.meroxa_deleted_at, a.full_time, a.id, a.name, a.updated_at) VALUES (b.meroxa_operation, b.meroxa_created_at, b.meroxa_updated_at, b.meroxa_deleted_at, b.full_time, b.id, b.name, b.updated_at) ; "}
benchi-conduit  | {"level":"info","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907364538,"message":"ran MERGE for inserts. rows affected: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","file":"615683d750a64bc4bb6ab179b45f896b_inserts.csv.zstd","time":1744907364814,"message":"cleaning file from stage \"stage\""}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","duration":3728.158517,"time":1744907364962,"message":"finished processing records"}
benchi-conduit  | {"level":"debug","component":"connector.Persister","stack":null,"count":1,"duration":0.160946,"time":1744907366107,"message":"persisted connectors"}
benchi-conduit  | {"level":"info","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907367926,"message":"batch contains 100000 records"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907367926,"message":"schema detected: map[full_time:BOOLEAN id:FLOAT meroxa_created_at:TIMESTAMP_TZ meroxa_deleted_at:TIMESTAMP_TZ meroxa_operation:VARCHAR meroxa_updated_at:TIMESTAMP_TZ name:VARCHAR updated_at:VARCHAR]"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907368020,"message":"executing: SHOW COLUMNS IN TABLE conduit_test;"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907368433,"message":"Existing Table Schema (map[full_time:BOOLEAN id:FLOAT meroxa_created_at:TIMESTAMP_TZ meroxa_deleted_at:TIMESTAMP_TZ meroxa_operation:VARCHAR meroxa_updated_at:TIMESTAMP_TZ name:VARCHAR updated_at:VARCHAR])"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907368433,"message":"Connector Generated Schema (map[full_time:BOOLEAN id:FLOAT meroxa_created_at:TIMESTAMP_TZ meroxa_deleted_at:TIMESTAMP_TZ meroxa_operation:VARCHAR meroxa_updated_at:TIMESTAMP_TZ name:VARCHAR updated_at:VARCHAR])"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907368433,"message":"num of records in batch before deduping: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907368487,"message":"num of records in batch after deduping: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907368703,"message":"num inserts in CSV buffer: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907368703,"message":"num updates/deletes in CSV buffer: 0"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907368906,"message":"executing: CREATE TABLE IF NOT EXISTS conduit_test (\n\t\tmeroxa_operation VARCHAR, meroxa_created_at TIMESTAMP_TZ, meroxa_updated_at TIMESTAMP_TZ, meroxa_deleted_at TIMESTAMP_TZ, full_time BOOLEAN, id FLOAT, name VARCHAR, updated_at VARCHAR,\n\t\tPRIMARY KEY (id)\n\t)"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","insertbuf_len":7100000,"updatebuf_len":0,"time":1744907369304,"message":"preparing to upload data to stage"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","duration":68.081804,"in":7100000,"out":924101,"time":1744907369372,"message":"finished compressing"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","duration":519.471909,"time":1744907369823,"message":"finished uploading file 09534ee5b5a340d08f510943105a3c6e_inserts.csv.zstd"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907369898,"message":"start of merge"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907369898,"message":"insertsFilename=09534ee5b5a340d08f510943105a3c6e_inserts.csv.zstd, updatesFilename="}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907369898,"message":"constructing merge query for inserts"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907369898,"message":"executing: MERGE INTO conduit_test as a USING ( select $1 meroxa_operation, $2 meroxa_created_at, $3 meroxa_updated_at, $4 meroxa_deleted_at, $5 full_time, $6 id, $7 name, $8 updated_at from @stage/09534ee5b5a340d08f510943105a3c6e_inserts.csv.zstd (FILE_FORMAT =>  CSV_CONDUIT_SNOWFLAKE ) ) AS b ON a.id = b.id\n\t\t\tWHEN MATCHED AND ( b.meroxa_operation = 'create' OR b.meroxa_operation = 'snapshot' ) THEN UPDATE SET a.meroxa_operation = b.meroxa_operation, a.meroxa_created_at = b.meroxa_created_at, a.meroxa_updated_at = b.meroxa_updated_at, a.meroxa_deleted_at = b.meroxa_deleted_at, a.full_time = b.full_time, a.id = b.id, a.name = b.name, a.updated_at = b.updated_at\n\t\t\tWHEN NOT MATCHED AND ( b.meroxa_operation = 'create' OR b.meroxa_operation = 'snapshot' ) THEN INSERT  (a.meroxa_operation, a.meroxa_created_at, a.meroxa_updated_at, a.meroxa_deleted_at, a.full_time, a.id, a.name, a.updated_at) VALUES (b.meroxa_operation, b.meroxa_created_at, b.meroxa_updated_at, b.meroxa_deleted_at, b.full_time, b.id, b.name, b.updated_at) ; "}
benchi-conduit  | {"level":"info","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907371400,"message":"ran MERGE for inserts. rows affected: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","file":"09534ee5b5a340d08f510943105a3c6e_inserts.csv.zstd","time":1744907371752,"message":"cleaning file from stage \"stage\""}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","duration":4044.530035,"time":1744907371971,"message":"finished processing records"}
benchi-conduit  | {"level":"debug","component":"connector.Persister","stack":null,"count":1,"duration":0.160195,"time":1744907373118,"message":"persisted connectors"}
benchi-conduit  | {"level":"info","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907374930,"message":"batch contains 100000 records"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907374930,"message":"schema detected: map[full_time:BOOLEAN id:FLOAT meroxa_created_at:TIMESTAMP_TZ meroxa_deleted_at:TIMESTAMP_TZ meroxa_operation:VARCHAR meroxa_updated_at:TIMESTAMP_TZ name:VARCHAR updated_at:VARCHAR]"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907375088,"message":"executing: SHOW COLUMNS IN TABLE conduit_test;"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907375921,"message":"Existing Table Schema (map[full_time:BOOLEAN id:FLOAT meroxa_created_at:TIMESTAMP_TZ meroxa_deleted_at:TIMESTAMP_TZ meroxa_operation:VARCHAR meroxa_updated_at:TIMESTAMP_TZ name:VARCHAR updated_at:VARCHAR])"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907375921,"message":"Connector Generated Schema (map[full_time:BOOLEAN id:FLOAT meroxa_created_at:TIMESTAMP_TZ meroxa_deleted_at:TIMESTAMP_TZ meroxa_operation:VARCHAR meroxa_updated_at:TIMESTAMP_TZ name:VARCHAR updated_at:VARCHAR])"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907375922,"message":"num of records in batch before deduping: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907375976,"message":"num of records in batch after deduping: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907376195,"message":"num inserts in CSV buffer: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907376195,"message":"num updates/deletes in CSV buffer: 0"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907376304,"message":"executing: CREATE TABLE IF NOT EXISTS conduit_test (\n\t\tmeroxa_operation VARCHAR, meroxa_created_at TIMESTAMP_TZ, meroxa_updated_at TIMESTAMP_TZ, meroxa_deleted_at TIMESTAMP_TZ, full_time BOOLEAN, id FLOAT, name VARCHAR, updated_at VARCHAR,\n\t\tPRIMARY KEY (id)\n\t)"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","insertbuf_len":7100000,"updatebuf_len":0,"time":1744907376549,"message":"preparing to upload data to stage"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","duration":58.368526,"in":7100000,"out":924866,"time":1744907376608,"message":"finished compressing"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","duration":417.704337,"time":1744907376967,"message":"finished uploading file bb2a353d873f4a8788051979fbd9479b_inserts.csv.zstd"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907377119,"message":"start of merge"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907377119,"message":"insertsFilename=bb2a353d873f4a8788051979fbd9479b_inserts.csv.zstd, updatesFilename="}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907377119,"message":"constructing merge query for inserts"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907377119,"message":"executing: MERGE INTO conduit_test as a USING ( select $1 meroxa_operation, $2 meroxa_created_at, $3 meroxa_updated_at, $4 meroxa_deleted_at, $5 full_time, $6 id, $7 name, $8 updated_at from @stage/bb2a353d873f4a8788051979fbd9479b_inserts.csv.zstd (FILE_FORMAT =>  CSV_CONDUIT_SNOWFLAKE ) ) AS b ON a.id = b.id\n\t\t\tWHEN MATCHED AND ( b.meroxa_operation = 'create' OR b.meroxa_operation = 'snapshot' ) THEN UPDATE SET a.meroxa_operation = b.meroxa_operation, a.meroxa_created_at = b.meroxa_created_at, a.meroxa_updated_at = b.meroxa_updated_at, a.meroxa_deleted_at = b.meroxa_deleted_at, a.full_time = b.full_time, a.id = b.id, a.name = b.name, a.updated_at = b.updated_at\n\t\t\tWHEN NOT MATCHED AND ( b.meroxa_operation = 'create' OR b.meroxa_operation = 'snapshot' ) THEN INSERT  (a.meroxa_operation, a.meroxa_created_at, a.meroxa_updated_at, a.meroxa_deleted_at, a.full_time, a.id, a.name, a.updated_at) VALUES (b.meroxa_operation, b.meroxa_created_at, b.meroxa_updated_at, b.meroxa_deleted_at, b.full_time, b.id, b.name, b.updated_at) ; "}
benchi-conduit  | {"level":"info","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907378510,"message":"ran MERGE for inserts. rows affected: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","file":"bb2a353d873f4a8788051979fbd9479b_inserts.csv.zstd","time":1744907378846,"message":"cleaning file from stage \"stage\""}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","duration":4034.187629,"time":1744907378964,"message":"finished processing records"}
benchi-conduit  | {"level":"debug","component":"connector.Persister","stack":null,"count":1,"duration":0.138079,"time":1744907380108,"message":"persisted connectors"}
benchi-conduit  | {"level":"info","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907381966,"message":"batch contains 100000 records"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907381966,"message":"schema detected: map[full_time:BOOLEAN id:FLOAT meroxa_created_at:TIMESTAMP_TZ meroxa_deleted_at:TIMESTAMP_TZ meroxa_operation:VARCHAR meroxa_updated_at:TIMESTAMP_TZ name:VARCHAR updated_at:VARCHAR]"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907382085,"message":"executing: SHOW COLUMNS IN TABLE conduit_test;"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907382467,"message":"Existing Table Schema (map[full_time:BOOLEAN id:FLOAT meroxa_created_at:TIMESTAMP_TZ meroxa_deleted_at:TIMESTAMP_TZ meroxa_operation:VARCHAR meroxa_updated_at:TIMESTAMP_TZ name:VARCHAR updated_at:VARCHAR])"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907382467,"message":"Connector Generated Schema (map[full_time:BOOLEAN id:FLOAT meroxa_created_at:TIMESTAMP_TZ meroxa_deleted_at:TIMESTAMP_TZ meroxa_operation:VARCHAR meroxa_updated_at:TIMESTAMP_TZ name:VARCHAR updated_at:VARCHAR])"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907382468,"message":"num of records in batch before deduping: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907382523,"message":"num of records in batch after deduping: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907382736,"message":"num inserts in CSV buffer: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907382736,"message":"num updates/deletes in CSV buffer: 0"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907382911,"message":"executing: CREATE TABLE IF NOT EXISTS conduit_test (\n\t\tmeroxa_operation VARCHAR, meroxa_created_at TIMESTAMP_TZ, meroxa_updated_at TIMESTAMP_TZ, meroxa_deleted_at TIMESTAMP_TZ, full_time BOOLEAN, id FLOAT, name VARCHAR, updated_at VARCHAR,\n\t\tPRIMARY KEY (id)\n\t)"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","insertbuf_len":7100000,"updatebuf_len":0,"time":1744907383164,"message":"preparing to upload data to stage"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","duration":58.310126,"in":7100000,"out":923664,"time":1744907383222,"message":"finished compressing"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","duration":404.44964,"time":1744907383568,"message":"finished uploading file 1592927161de4761a51bc174af810820_inserts.csv.zstd"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907383946,"message":"start of merge"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907383946,"message":"insertsFilename=1592927161de4761a51bc174af810820_inserts.csv.zstd, updatesFilename="}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907383946,"message":"constructing merge query for inserts"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907383946,"message":"executing: MERGE INTO conduit_test as a USING ( select $1 meroxa_operation, $2 meroxa_created_at, $3 meroxa_updated_at, $4 meroxa_deleted_at, $5 full_time, $6 id, $7 name, $8 updated_at from @stage/1592927161de4761a51bc174af810820_inserts.csv.zstd (FILE_FORMAT =>  CSV_CONDUIT_SNOWFLAKE ) ) AS b ON a.id = b.id\n\t\t\tWHEN MATCHED AND ( b.meroxa_operation = 'create' OR b.meroxa_operation = 'snapshot' ) THEN UPDATE SET a.meroxa_operation = b.meroxa_operation, a.meroxa_created_at = b.meroxa_created_at, a.meroxa_updated_at = b.meroxa_updated_at, a.meroxa_deleted_at = b.meroxa_deleted_at, a.full_time = b.full_time, a.id = b.id, a.name = b.name, a.updated_at = b.updated_at\n\t\t\tWHEN NOT MATCHED AND ( b.meroxa_operation = 'create' OR b.meroxa_operation = 'snapshot' ) THEN INSERT  (a.meroxa_operation, a.meroxa_created_at, a.meroxa_updated_at, a.meroxa_deleted_at, a.full_time, a.id, a.name, a.updated_at) VALUES (b.meroxa_operation, b.meroxa_created_at, b.meroxa_updated_at, b.meroxa_deleted_at, b.full_time, b.id, b.name, b.updated_at) ; "}
benchi-conduit  | {"level":"info","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","time":1744907385390,"message":"ran MERGE for inserts. rows affected: 100000"}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","file":"1592927161de4761a51bc174af810820_inserts.csv.zstd","time":1744907385729,"message":"cleaning file from stage \"stage\""}
benchi-conduit  | {"level":"debug","connector_id":"kafka-to-snowflake:snowflake","plugin_type":"destination","plugin_name":"snowflake","component":"plugin","duration":3889.148245,"time":1744907385855,"message":"finished processing records"}
[Kbenchi-conduit exited with code 2
